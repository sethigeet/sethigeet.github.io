---
import "../global.css";

import { Tooltips } from "astro-tooltips";

import { Header, Footer, TOC } from "@components/index.astro";
import type { Heading } from "@components/TOC.astro";

interface Props {
  frontmatter: {
    title: string;
    excerpt: string;
    image: {
      url: string;
      alt: string;
    };
    publishedAt: string;
    minutesRead: string;
    file: string;
    url: string;
  };
  headings: Array<Heading>;
}

const { frontmatter, headings } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content={frontmatter.excerpt} />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link rel="manifest" href="/site.webmanifest" />
  <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#4BCAEA" />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/katex@0.13.0/dist/katex.min.css"
  />
  <meta name="msapplication-TileColor" content="#4BCAEA" />
  <meta name="theme-color" content="#4BCAEA" />

  <title>{frontmatter.title} | Geet Sethi</title>

  <Tooltips interactive={false} />
  <body>
    <div class="mx-auto flex min-h-screen max-w-7xl flex-col p-2 md:p-4">
      <Header />

      <div class="grid items-start gap-8 lg:grid-cols-[minmax(0,3fr)_1fr]">
        <main
          class="prose prose-invert row-start-2 mx-auto w-full max-w-[100ch] flex-1 lg:col-span-1 lg:row-start-auto"
        >
          <slot />
        </main>

        <aside
          class="row-start-1 mb-8 lg:sticky lg:top-24 lg:col-span-1 lg:row-start-auto lg:mb-0 lg:max-h-[calc(100vh-8rem)] lg:overflow-y-auto"
        >
          <TOC headings={headings} />
        </aside>
      </div>

      <Footer />
    </div>

    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const tocLinks = document.querySelectorAll(".toc-link");
        const headings = Array.from(
          document.querySelectorAll(
            "main h1[id], main h2[id], main h3[id], main h4[id], main h5[id], main h6[id]",
          ),
        );
        const tocList = document.getElementById("toc-list");

        if (!tocLinks.length || !headings.length || !tocList) return;

        let activeLink = null;
        let activeHeadingTimeout = null;

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const link = tocList.querySelector(
                `a[data-slug="${entry.target.id}"]`,
              );
              if (!link) return;

              if (entry.isIntersecting && entry.intersectionRatio >= 0.5) {
                if (activeHeadingTimeout) clearTimeout(activeHeadingTimeout);

                if (activeLink && activeLink !== link) {
                  activeLink.classList.remove("text-primary", "font-semibold");
                  activeLink.classList.add(
                    "text-slate-500",
                    "dark:text-slate-400",
                  );
                }
                link.classList.remove("text-slate-500", "dark:text-slate-400");
                link.classList.add("text-primary", "font-semibold");
                activeLink = link;
              } else {
                if (link === activeLink) {
                  activeHeadingTimeout = setTimeout(() => {
                    link.classList.remove("text-primary", "font-semibold");
                    link.classList.add("text-slate-500", "dark:text-slate-400");
                    activeLink = null;
                  }, 100);
                }
              }
            });
          },
          {
            rootMargin: "0px 0px -60% 0px",
            threshold: [0, 0.5, 1.0],
          },
        );

        headings.forEach((heading) => observer.observe(heading));

        window.addEventListener("beforeunload", () => {
          observer.disconnect();
        });
      });
    </script>
  </body>
</html>
